**************************************************************
#include<bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cin>>n;
    string s1;
    string s2;
    string str;
    for(int i=0;i<n;i++){
        cin>>s1;
        if(s1 == 'cd'){
                cin>>s2;
                if(s2 != '..'){
                    str += '\'+s2;
                }
                else{
                    str.substr(0,str.size()-2);
                }
            }
        }
        else{
            cout<<str<<endl;
        }
    }
    return 0;
}
******************************************************************
携程笔试题一：
int main()
{
    int n;
    cin >> n;
    string cmd;
    string path;
    string t;
    for (int i = 0; i < n; ++i)
    {
        cin >> cmd;
        if (cmd == "pwd")
        {
            if (path.empty())
                cout << "\\" << endl;
            else
                cout << path << endl;
        }
        else
        {
            cin >> t;
            if (t == "..")
            {
                if (path.empty())
                    continue;
                else
                {
                    while (path.back() != '\\')
                        path.pop_back();
                    path.pop_back();
                }
            }
            else
            {
                path.push_back('\\');
                path += t;
            }
        }
    }
    return 0;
}
******************************************************************
携程笔试第二题
#include <iostream>
#include<string>
#include<vector>
using namespace std;

bool check(const vector<int>& vec, int k, int diff)
{
    int n = vec.size();
    int cnt = 1;
    int maxn = vec[0];
    int minn = vec[0];
    for (int i = 1; i < n; ++i)
    {
        if (vec[i] - minn > diff || maxn - vec[i] > diff)
        {
            ++cnt;
            maxn = vec[i];
            minn = vec[i];
            if (cnt > k)
                return false;
        }
        else
        {
            maxn = max(maxn, vec[i]);
            minn = min(minn, vec[i]);
        }
    }
    return true;
}
int solve(const vector<int>& vec, int k)
{
    int n = vec.size();
    int l = 0;
    int r = 100000;
    while (l < r)
    {
        int mid = l + (r - l) / 2;
        if (check(vec, k, mid))
            r = mid;
        else
            l = mid + 1;
    }
    return l;
}
int main()
{
    int n, k;
    cin >> n >> k;
    vector<int> vec(n);
    for (int i = 0; i < n; ++i)
        cin >> vec[i];
    cout << solve(vec, k) << endl;
    return 0;
}

输入：
5 2
3 5 5 2 5
输出：
2
******************************************************************
携程笔试第三题
#include<bits/stdc++.h>

using namespace std;

int main()
{
    int n, m;
    string s;
    cin >> n >> m;
    cin >> s;

    map<int, int> mp;
    int k, x;
    for (int i = 0; i < m; ++i)
    {
        cin >> k >> x;
        mp[k] = max(mp[k], x);
    }
    int maxn = 0;
    for (auto it = mp.begin(); it != mp.end();)
    {
        if (it->second <= maxn)
            mp.erase(it++);
        else
        {
            maxn = it->second;
            ++it;
        }
    }

    vector<int> cnt;
    for (int i = 0; i < n; ++i)
    {
        if (s[i] == '0')
            continue;
        int j = i + 1;
        while (j < n&& s[j] == '1')++j;
        cnt.emplace_back(j - i);
        i = j - 1;
    }
    if (0 == cnt.size())
    {
        cout << 0 << endl;
        return 0;
    }
    sort(cnt.begin(), cnt.end(), [](const int a, const int b) {return a > b; });
    //int minLen=mp.begin()->first;
    int len = mp.size();
    vector<int> cost(len);
    vector<int> profit(len);
    int idx = 0;
    for (auto it = mp.begin(); it != mp.end(); ++it)
    {
        int c = it->first;
        int p = it->second;
        cost[idx] = c;
        profit[idx] = p;
        ++idx;
    }
    int range = cnt[0];
    vector<vector<int>> dp(len, vector<int>(range + 1, 0));
    for (int i = 0; i < len; ++i)
        for (int j = 1; j <= range; ++j)
        {
            if (i == 0)
            {
                dp[0][j] = j / cost[0] * profit[0];
            }
            else
            {
                dp[i][j] = dp[i - 1][j];
                if (j - cost[i] >= 0)
                    dp[i][j] = max(dp[i][j], max(dp[i - 1][j - cost[i]], dp[i][j - cost[i]]) + profit[i]);
            }
        }
    int res = 0;
    for (int i = 0; i < cnt.size(); ++i)
    {
        res += dp[len - 1][cnt[i]];
    }
    cout << res << endl;
    return 0;
}
******************************************************************
#include<bits/stdc++.h>
using namespace std;

int res = 0;
int curRes = 0;
vector<int> res;
vector<int> vec;
void getAns(vector<int>& A, int k, int startIndex，int count){			//回溯
    if(count = k){				//终止条件，已经分割出了k个
        return;
    }
    for(int i=startIndex;i<A.size();i++){
        vec.push_back(A[i]);
        for(int j=1;j<vec.size();j++){
            int ma = max(vec[j],vec[j-1]);
            int mi = min(vec[j],vec[j-1]);
            curRes = ma-mi;
        }
        res.push_back(curRes);
        count++;
        getAns(A,i+1,count);
        count--;
        vec.pop_back(A[i]);
    }
}
int main(){
    int n,k;
    cin>>n>>k;
    vector<int> A;
    int a;
    for(int i=0;i<n;i++){
        cin>>a;
        A.push_back(a);
    }
    getAns(A,k,0,1);
    return res;
}